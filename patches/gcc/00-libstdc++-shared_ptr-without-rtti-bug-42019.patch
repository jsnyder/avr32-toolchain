diff -ru libstdc++-v3.old/include/bits/shared_ptr.h libstdc++-v3/include/bits/shared_ptr.h
--- libstdc++-v3.old/include/bits/shared_ptr.h	2013-07-19 21:25:41.310178557 +0200
+++ libstdc++-v3/include/bits/shared_ptr.h	2013-07-19 20:57:03.254130628 +0200
@@ -143,7 +143,13 @@
       
       virtual void*
       _M_get_deleter(const std::type_info& __ti)
-      { return __ti == typeid(_Deleter) ? &_M_del._M_del : 0; }
+      {
+#ifdef __GXX_RTTI
+        return __ti == typeid(_Deleter) ? &_M_del._M_del : 0;
+#else
+        return 0;
+#endif
+      }
       
     protected:
       _My_Deleter      _M_del;  // copy constructor must not throw
@@ -201,9 +207,13 @@
       virtual void*
       _M_get_deleter(const std::type_info& __ti)
       {
+#ifdef __GXX_RTTI
         return __ti == typeid(_Sp_make_shared_tag)
                ? static_cast<void*>(&_M_storage)
                : _Base_type::_M_get_deleter(__ti);
+#else
+        return 0;
+#endif
       }
       
     private:
@@ -850,6 +860,7 @@
         { return _M_refcount._M_less(__rhs._M_refcount); }
 
     protected:
+#ifdef __GXX_RTTI
       // This constructor is non-standard, it is used by allocate_shared.
       template<typename _Alloc, typename... _Args>
         __shared_ptr(_Sp_make_shared_tag __tag, _Alloc __a, _Args&&... __args)
@@ -862,6 +873,39 @@
           _M_ptr = static_cast<_Tp*>(__p);
 	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
         }
+#else
+      template<typename _Alloc>
+        struct _Deleter
+        {
+          void operator()(_Tp* __ptr)
+          {
+            _M_alloc.destroy(__ptr);
+            _M_alloc.deallocate(__ptr, 1);
+          }
+          _Alloc _M_alloc;
+        };
+
+      template<typename _Alloc, typename... _Args>
+       __shared_ptr(_Sp_make_shared_tag __tag, _Alloc __a, _Args&&... __args)
+       : _M_ptr(), _M_refcount()
+        {
+         typedef typename _Alloc::template rebind<_Tp>::other _Alloc2;
+          _Deleter<_Alloc2> __del = { _Alloc2(__a) };
+          _M_ptr = __del._M_alloc.allocate(1);
+         __try
+           {
+              __del._M_alloc.construct(_M_ptr, std::forward<_Args>(__args)...);
+           }
+         __catch(...)
+           {
+              __del._M_alloc.deallocate(_M_ptr, 1);
+             __throw_exception_again;
+           }
+          __shared_count<_Lp> __count(_M_ptr, __del, __del._M_alloc);
+          _M_refcount._M_swap(__count);
+         __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
+        }
+#endif
 
       template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
                typename... _Args>
@@ -1002,7 +1046,13 @@
   template<typename _Del, typename _Tp, _Lock_policy _Lp>
     inline _Del*
     get_deleter(const __shared_ptr<_Tp, _Lp>& __p)
-    { return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del))); }
+    {
+#ifdef __GXX_RTTI
+      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));
+#else
+      return 0;
+#endif
+    }
 
 
   template<typename _Tp, _Lock_policy _Lp>
diff -ru libstdc++-v3.old/include/tr1/shared_ptr.h libstdc++-v3/include/tr1/shared_ptr.h
--- libstdc++-v3.old/include/tr1/shared_ptr.h	2013-07-19 21:25:41.314178556 +0200
+++ libstdc++-v3/include/tr1/shared_ptr.h	2013-07-19 20:55:38.470128266 +0200
@@ -76,7 +76,13 @@
       
       virtual void*
       _M_get_deleter(const std::type_info& __ti)
-      { return __ti == typeid(_Deleter) ? &_M_del : 0; }
+      {
+#ifdef __GXX_RTTI
+        return __ti == typeid(_Deleter) ? &_M_del : 0;
+#else
+        return 0;
+#endif
+      }
       
     private:
       _Sp_counted_base_impl(const _Sp_counted_base_impl&);
@@ -639,7 +645,13 @@
   template<typename _Del, typename _Tp, _Lock_policy _Lp>
     inline _Del*
     get_deleter(const __shared_ptr<_Tp, _Lp>& __p)
-    { return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del))); }
+    {
+#ifdef __GXX_RTTI
+      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));
+#else
+      return 0;
+#endif
+    }
 
 
   template<typename _Tp, _Lock_policy _Lp>
